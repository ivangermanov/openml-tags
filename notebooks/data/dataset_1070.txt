Name: KC1 Numeric Tags: PROMISE

This is a PROMISE Software Engineering Repository data set made publicly available to encourage repeatable, verifiable, refutable, and/or improvable predictive models of software engineering. If you publish material based on PROMISE data sets, please follow the acknowledgment guidelines posted on the PROMISE repository web page.

Title: Class-level data for KC1
This dataset includes a numeric attribute (NUMDEFECTS) to indicate defectiveness.

The data set was used for investigating the effect of module size on defect prediction using static measures. Several machine learning algorithms were employed to predict defective modules in five NASA products. A set of static measures served as predictor variables. It was observed that a large portion of the modules were small, as measured by lines of code. Experiments on data subsets created by partitioning according to module size yielded higher prediction performance for subsets including larger modules. Defect prediction using class-level data for KC1 resulted in improved prediction performance compared to using method-level data. These findings suggest that quality assurance activities can be better guided if defect predictions are made using data from larger modules.

The dataset includes features at the class level, such as percentage of public data, access to public data, coupling between objects, depth, lack of cohesion of methods, number of children, dependency on child, fan in, response for class, and weighted methods per class. Additionally, it contains features transformed from method level to class level, including various metrics related to lines of code, complexity, and Halstead metrics.

The response variable is NUMDEFECTS, which represents the number of defects recorded for each class. The features provide information about various aspects of the code, including encapsulation, inheritance, cohesion, polymorphism, and complexity.

This dataset can be valuable for researchers and practitioners interested in software defect prediction, code quality assessment, and understanding the relationship between various code metrics and defect proneness.

Keywords: software defect prediction, class-level metrics, code complexity, NASA projects, machine learning, static code analysis, software quality assurance