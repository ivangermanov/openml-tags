Pen-Based Recognition of Handwritten Digits

Name: pendigits
Tags: AzurePilot, OpenML-CC18, OpenML100, study, uci

This dataset was created by collecting samples from writers. The samples, written by a subset of writers, are used for training, cross-validation and writer-dependent testing, while digits written by the remaining writers are used for writer-independent testing. The database is also available in the UNIPEN format.

Data collection utilized a WACOM PL-100V pressure-sensitive tablet with an integrated LCD display and a cordless stylus. The input and display areas are co-located. Connected to the serial port of an Intel-based PC, it allows for the collection of handwriting samples. The tablet transmits x and y tablet coordinates and pressure level values of the pen at fixed time intervals of milliseconds.

Writers were instructed to write digits in random order inside boxes of tablet pixel resolution. Subjects were monitored only during initial entry screens. Each screen contained boxes with the digits to be written displayed above. Writers were instructed to write only inside these boxes and could clear the content of a box using an on-screen button if they made a mistake or were unhappy with their writing. The first set of digits were ignored as most writers were unfamiliar with the input device, though subjects were unaware of this.

The study utilized only x and y coordinate information, ignoring stylus pressure level values. Normalization was applied to make the representation invariant to translations and scale distortions. The raw data captured from the tablet consisted of integer values within a specific range. New coordinates were calculated such that the coordinate with the maximum range varied between specific values.

To train and test classifiers, digits were represented as constant length feature vectors. A technique leading to good results was resampling the x and y points. Spatial resampling to obtain a regularly spaced points on the trajectory yielded better performance by providing better alignment between points. The resampling algorithm used simple linear interpolation between pairs of points.

The resampled digits were represented as a sequence of points regularly spaced in arc length, as opposed to the input sequence, which was regularly spaced in time. The input vector size was twice the number of resampled points. Experiments considered spatial resampling to different numbers of points, with one option providing the best trade-off between accuracy and complexity.

The dataset was divided into portions for actual training, validation, writer-dependent testing, and writer-independent testing. The test set used for writer-independent testing served as the actual quality measure.

Preprocessing programs were used to extract normalized bitmaps of handwritten digits from a preprinted form. Bitmaps were divided into non-overlapping blocks, and the number of active pixels were counted in each block. This generated an input matrix where each element was an integer within a specific range, reducing dimensionality and providing invariance to small distortions.

The dataset includes multiple input attributes and a class attribute. All input attributes are integers within a specific range. The class attribute represents digit classes from zero to nine. The dataset provides information on the number of examples for each class in both the training and testing sets.

Keywords: handwritten digits, spatial resampling, normalization, feature vectors, writer-independent testing, preprocessing, bitmap extraction, classification